services:
  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-create-client-db.sh:/docker-entrypoint-initdb.d/init-create-client-db.sh
    ports:
      - "${DB_PORT}:5432"

  authorization-server:
    build:
      context: ./backend
      dockerfile: authorization-server.Dockerfile
    restart: always
    environment:
      DB_HOSTNAME: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ISSUER_URI: ${ISSUER_URI}
      CLIENT_SECRET_ENCODED: ${CLIENT_SECRET_ENCODED}
      CLIENT_URL: ${CLIENT_URL}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - 8081:8080
    depends_on:
      - postgres

  resource-server:
    build:
      context: ./backend
      dockerfile: resource-server.Dockerfile
    restart: always
    environment:
      CORS_ALLOWED_ORIGINS: http://localhost:4200
      DB_HOSTNAME: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ISSUER_URI: ${ISSUER_URI}
      AUTHORIZATION_URL: ${AUTHORIZATION_URL}
      CLIENT_SECRET: ${CLIENT_SECRET}
      CLIENT_URL: ${CLIENT_URL}
      SUPER_ADMIN_USERNAME: ${SUPER_ADMIN_USERNAME}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      SUPER_ADMIN_EMAIL: ${SUPER_ADMIN_EMAIL}
      LOG_MAX_HISTORY: ${LOG_MAX_HISTORY}
      LOG_TOTAL_SIZE_CAP: ${LOG_TOTAL_SIZE_CAP}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - 8080:8080
    depends_on:
      - postgres
      - authorization-server

volumes:
  postgres_data:
